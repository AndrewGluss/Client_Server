Client_Server_HW1
1) Прочитать про клиент-серверную архитектуру
	Архитектура, где сетевая нагрузка распределяется между поставщиками услуг, серверами и заказчиками услуг.
	Клиент и сервер - программное обеспечение, находящиеся на разных ЭВМ и взаимодействуют между собой через сетевые протоколы.
	Клиент --> запрос на Сервер
	Сервер --> ответ Клиенту
	Тонкий клиент - ЭВМ или программа-клиент в сетях КСА, которая переносит всю или большую часть работы на сервер. Пример - браузер
	Толстый клиент - приложение, которое обеспечивает расширенную функциональность независимо от центрального сервера. Сервер играет роль хранилища (БД). Пример онлайн игры.
2) Что такое HTTP и HTTPS
	HTTP - Hypertext Transfer Protocol - протокол передачи гипертекста, протокол прикладного уровня
	Протокол - набор правил для передачи информации. с помощью протоколов регламентируют как информацию будет передаваться в сети интернет.
	HTTPS - зашифрованный протокол
3) HTTP методы
	GET - запрашивает предоставление ресурса. Только для извлечения данных
	POST - создание сущности к указанному ресурсу. Может вызывать побочные эффекты на сервере и изменения состояния
	PUT - изменяет текущую информацию о сущности на сервере.
	DELETE - удаляет данную сущность с сервера.
	HEAD - как GET, только ответ приходит без тела
	PATCH - частично изменяет сущность.
	CONNECT - настраивает туннель с сервером определенным по ресурсу.
	OPTIONS - описывает параметры соединения с сущностью на сервере.
	TRACE - вызывает возвращаемое текстовое сообщение с сущности на сервере.
4) HTTP статус коды сервера
	1хх - информационное сообщение о процессе передачи
		100 Continue - сервер удовлетворён начальными сведениями о запросе, клиент может продолжать пересылать заголовки. Появился в HTTP/1.1.
		101 Switching Protocols - сервер выполняет требование клиента и переключает протоколы в соответствии с указанием, данным в поле заголовка Upgrade.
                Сервер отправляет заголовок ответа Upgrade, указывая протокол, на который он переключился. Появился в HTTP/1.1.
		102 Processing - запрос принят, но на его обработку понадобится длительное время. Используется сервером, чтобы клиент не разорвал соединение
		из-за превышения времени ожидания. Клиент при получении такого ответа должен сбросить таймер и дожидаться следующей команды в обычном режиме. Появился в WebDAV
		103 Early Hints - используется для раннего возврата части заголовков, когда заголовки полного ответа не могут буть быстро сформированы.
	2хх - информационное сообщение о успешном принятии и обработки запроса клиента
		200 OK - успешный запрос. Если клиентом были запрошены какие-либо данные, то они находятся в заголовке и/или теле сообщения. Появился в HTTP/1.0.
		201 Created - в результате успешного выполнения запроса был создан новый ресурс.
                Сервер может указать адреса (их может быть несколько) созданного ресурса в теле ответа, при этом предпочтительный адрес указывается в заголовке Location.
                Серверу рекомендуется указывать в теле ответа характеристики созданного ресурса и его адреса, формат тела ответа определяется заголовком Content-Type.
                При обработке запроса новый ресурс должен быть создан до отправки ответа клиенту, иначе следует использовать ответ с кодом 202. Появился в HTTP/1.0.
		202 Accepted - запрос был принят на обработку, но она не завершена.
                Клиенту не обязательно дожидаться окончательной передачи сообщения, так как может быть начат очень долгий процесс.
                Появился в HTTP/1.0.
		203 Non-Authoritative Information - аналогичен ответу 200, только передаваемая информация взята не из первичного источника (резервной копии, другого сервере)
                И поэтому может быть не актуальной. Появился в HTTP/1.1
		204 Not Content - Сервер успешно обработал запрос, но в ответе были переданы только заголовки без тела сообщения. Клиент не должен обновлять содержимое документа, но может применит к нему полученные метаданные. Появился в HTTP/1.0
		205 Reset Content - Сервер обязывает клиент сбросить введенные пользователем данные.Тело сообщения сервер при этом не передает и документ обновлять не обязательно. Появился в HTTP/1.1
		206 Partial Content - сервер уддачно выполнил частичный GET-запрос, возвратив только часть сообщения. В заголовке Content-Range сервер указывает байтовые диапазоны содержимого. Особое внимание при работе с подобными ответами следует уделить кэшированию. Появился в HTTP/1.1
		207 Multi Status - сервер передает результаты выполнения сразу нескольких независимых операций. Они помещаются в само тело сообщения в виде XML-документа с объектом multistatus. 
                Не рекомендуется размещать в этом объекте статусы и серии 1xx из-за бессмысленности и избыточности.Появился в WebDAV
		208 Already Reported — члены привязки DAV уже были перечислены в предыдущей части (multistatus) ответа и не включаются снова.
		226 IM Used — заголовок A-IM от клиента был успешно принят и сервер возвращает содержимое с учётом указанных параметров. Введено в RFC 3229 для дополнения протокола HTTP поддержкой дельта-кодирования.
	3хх - сообщение о перенаправлении на другой url
		300
		301
		302
		303
		304
		305
		306
		307
		308
	4хх - ошибка на стороне клиента
		400 - Bad Request. Сервер не может обработать запрос. Неверный url, искажен или неверный.
		401 Unauthorized — для доступа к запрашиваемому ресурсу требуется аутентификация. В заголовке ответ должен содержать поле WWW-Authenticate с перечнем условий аутентификации. Иными словами, для доступа к запрашиваемому ресурсу клиент должен представиться, послав запрос, включив при этом в заголовок сообщения поле Authorization с требуемыми для аутентификации данными. Если запрос уже включает данные для авторизации, ответ 401 означает, что в авторизации с ними отказано.
		402
		403 - Forbidden. Клиент пытается получить доступ к серверу, к которому доступ запрещен.
		404 - Not Found. Клиент ссылается на несуществующий адрес.
		405 Method Not Allowed — указанный клиентом метод нельзя применить к текущему ресурсу. В ответе сервер должен указать доступные методы в заголовке Allow, разделив их запятой. Эту ошибку сервер должен возвращать, если метод ему известен, но он не применим именно к указанному в запросе ресурсу, если же указанный метод не применим на всём сервере, то клиенту нужно вернуть код 501 (Not Implemented). Появился в HTTP/1.1.
		406
		407
		408
		409
		410
		411
		412
		413
		414
		415
		416
		417
		418
		419
		421
		422
		423
		424
		425
		426
		428
		429
		431
		449
		451
		499
	5хх - ошибка на стороне сервера
		500
		501
		502
		503
		504
		505
		506
		507
		508
		509
		510
		511
		520
		521
		522
		523
		524
		525
		526
5) Что такое ядро браузера 
	Ядро браузера или браузерный движок - программа, преобразующую содержимое веб-страницы и информацию о форматировании в интерактивное изображение форматированного содержимого на экране.
6) Какие браузеры какиие ядра используют
	Trident - Microsoft Internet Explorer
	EdgeHTML - Microsoft Edge
	Presto - Opera Software до 2013 года
	Blink - Chrome, Microsoft Edge, Opera, Vivaldi
	Gecko - Mozilla Firefox
	WebKit - Apple Safari
7) Что такое API
	Application programming interface - специальный протокол для взаимодействия компьютерных программ, который позволяет использовать функции одного приложения внутри другого.
	Клиент --> API --> Сервер
	Клиент <-- API <-- Сервер
	SOAP API - Simple Object Access Protocol - простой протокол доступа к объктам. Клиент и сервер обмениваются сообщениями посредством XML. 
	REST API - Representation State Transfer - передача репрезентативного состояния. REST определяет набор функций, таких как GET, PUT, DELETE... такие, которые клиент модет использовать для доступа к данным сервера по протоколу HTTP
8. Что такое ендпоинты
	Некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Адрес на которые отправляются сообщения.
9) URL (URI, URL, URN)
	URL - uniform resource locater - уникальный адрес сайта/ресурса в сети интернет. https://appmaster.io
	URN - неизменяемая последовательность символов, определяющая только имя некоторого ресурса, но не говорит как к нему подключаться appmaster.io/partner-program
	URI - уникальный идентификатор, обобщенное понятие идентификации некоего ресурса, включает в себя url и urn. https://appmaster.io/partner-program
10) Идемпотентные HTTP методы
	При повторном выполнении результаты ожидаемо одинаковые
	GET - запросы с использованием этого метода могут извлекать данные
	HEAD - запрашивает ресурс как GET, но без тела запроса
	PUT - заменяет все текущие представление ресурса данными запроса
        DELETE - удаляет указанный ресурс
        OPTIONS, TRACE
	Неидемпонентные  - при повторном выполнении результаты будут отличаться
	POST, PATCH
11) Безопасные HTTP методы
	Не меняют данные, можно выполнять в любой последовательности
	GET, HEAD, OPTIONS
12) Иденфикация, Аутентификация, Авторизация
	Идентификация - процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
	Аутентификация - процедура проверки подлинности, например проверка подлинности пользователя тупем сравнения введенного им паролем с паролем, сохраненнм в БД.
	При оправке смс с кодом для подтверждения: Двухфакторная аутентификация.
	Авторизация - предоставления определенному лицу или группе лиц прав на выполнение определенных действий
13) Что такое IP
	IP - Internet Protocol - набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.
	IP-address - уникальный адрес, идентифицирующий устройство в интернете или локальной сети. позволяющий передавайть информацию между устройствами в сети.
	Содержит информацию о местоположении устройства и обеспечивает его доступность для связи.
	Строка чисел, разделенных точками в диапазоне от 0 до 255: 0.0.0.0 - 255.255.255.255
	IP-адрес назначает интернет-провайдер, который предоставляет доспут к сети интернет. Он перенаправляет все ответы на запросы используя IP-адрес
	Клиентские IP-адреса
		Частные IP-адреса - внутри сети
		Общедоступные IP-адреса - за пределами сети
			Статические
			Динамические
	IP-адреса для веб-сайтов
		Общие IP-адреса
		Выделенные IP-адреса
14) Что такое октаты в DNS
	DNS - система доменных имен. преобразует доменные имена, удобные для человеческого восприятия, в IP-адреса, понимаемые машиной
	Авторитативный DNS-сервис предоставляет механизм обновления, используемый разработчиками для управления публичными именами DNS.
	Отвечает на запросы к DNS, преобразуя доменные имена в IP-адреса, чтобы обеспечить взаимодействие компьютеров между собой.

	Рекурсивный DNS-сервис. Обычно клиенты не отправляют запросы напрямую к авторитативным DNS-сервисам. Вместо этого они взаимодействуют с другим DNS-сервисом,
	котоый называется преобразователь имен или рекурсивный DNS-сервис.
	
	IP-адрес делится на 4 октета по 8 бит каждый от 0 (00000000) до 255 (11111111).

15) Что такое порт, сколько портов у Linux сервера
	Порт - число, указываемое при запросе на соедиение.
	80 - http - просмотр веб-страниц
	443 - https - в зашифрованном протоколе используется при платежах
	23 - telnet - нешифрованное подсоединение к удаленным компьютерам в командной строке
	22 - ssh - шифрованная версия, имеет доп опции
16) Уровни OSI
	Сетевая модель - набор стандартов и правил, протоколов и требований, разделенных по уровням. Основное назначение - построение сети между устройствами
	Open Source Interconnect - открытые системы соединений. Создатели ISO
	Transfer Control Protocol - протокол управления передачей. Произошла от модели DOD Department of Defense
	
	Уровни OSI
	7 уровень Application. Взаимодействует с применениями программных обеспечений для предоставления необходимых функций связи. Используется для доставки данных конечному пользователю.
		DNS, WWW/HTTP, P2P, EMAIL/POP, SMTP, Telnet, FTP
	6 уровень Presentation. проверяет данные, чтобы обеспечить его совместимость с коммуникационными ресурсами. Обеспечивает преобразование протоколов и кодирование/декодирование данных.
		HTML, DOC, JPEG, MP3, AVI
	5 уровень Sessions. управляет соединениями между компьютерами. Устанавливает, управляет, сохраняет и разрывает соединения между локал. и удален. приложением.
		
	4 уровень Transport. обеспечивает функции и средства передачи последовательностей данных от источника к хосту назначения через одну или нестольких сетей
		сохраняя при этом функции quality of service и обеспечивая полную доставку данных
		TCP, UDP, SCTP, SSL, TLS
	3 уровень Network. обрабатывает маршрутизацию пакетов через логическую адресацию и функции коммутации.
		IP, ARP, IPsec, ICMP, IGMP, OSPF
	2 уровень Data Link. обеспечение взаимодействия сетей на физич уровне. решает проблему адресации и передачи информации.
		Media Access Control (MAC) - отвечает за управление тем, как уствройства в сети получают доступ к мультимедиа и разрешения на передачу данных
		Local Link Control (LLC) - отвечает за идентификацию и инкапсуляцию протоколов сетевого уровняб контролирует проверку ошибок и синхронизацию кадров.
	1 уровень Physical. определяет электрич и физич характеристики соединения данных. Разъемы, кабели, оптоволокно и частота, скорость передачи.
		RS-232, RJ45
17) Хедеры http запросов
	Заголовки http позволяют клиенту и серверу отправлять доп. инфу с запросом и ответом. Содержит не чувствительное к регистру название и через : значение.
	Могут содержать описание данных и информациюб необходимую для взаимодействия клиент и сервер.
